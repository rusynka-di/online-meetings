const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const http = require('http');
const { Server } = require('socket.io');
const [username, setUsername] = useState('');

const authRoutes = require('./routes/auth');
const meetingRoutes = require('./routes/meetings');

require('dotenv').config();

const app = express();
const server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: '*', 
    methods: ['GET', 'POST']
  }
});

io.on('connection', (socket) => {
  console.log('üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è');

  socket.on('sendMessage', (msg) => {
    io.emit('receiveMessage', msg);
  });

  socket.on('disconnect', () => {
    console.log('üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤');
  });
});

app.use(cors());
app.use(express.json());

app.use('/api/auth', authRoutes);
app.use('/api/meetings', meetingRoutes);

app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î');
});

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  server.listen(3000, () => console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000'));
})
.catch((err) => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err));
